syntax = "proto3";
package account;

import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
import "protoc-gen-swagger/options/annotations.proto";

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
	info: {
		title: "account.api";
        version: "1.0";
        contact: {
            name: "account.api project";
            url: "https://github.com/nodias/account.api project";
            email: "nodias46@gmail.com";
        };
    };
    schemes: HTTPS;
    consumes: "application/json";
    produces: "application/json";
    responses: {
        key: "404";
        value: {
            description: "Returned when the resource does not exist.";
            schema: {
                json_schema: {
                    type: STRING;
                }
            }
        }
    };
};

service AccountService {
    rpc CreateUser (CreateUserRequest) returns (CreateUserResponse) {
        option (google.api.http) = {
            post: "/account/users"
            body:"*"
        };
    }
    rpc ReadUsers (ReadUsersRequest) returns (stream ReadUsersResponse) {
        option (google.api.http) = {
            get: "/account/users"
        };
    }
    rpc ReadUser (ReadUserRequest) returns (ReadUserResponse) {
        option (google.api.http) = {
            get: "/account/users/{id}"
        };
    }
    rpc UpdateUser (UpdateUserRequest) returns (UpdateUserResponse) {
        option (google.api.http) = {
            put: "/account/users/{id}"
            body:"*"

            additional_bindings{
                patch: "/account/users/{id}"
                body: "*"
            }
        };
    }
    rpc DeleteUser (DeleteUserRequest) returns (DeleteUserResponse) {
        option (google.api.http) = {
            delete: "/account/users/{id}"
        };
    }
}
message User {
    string id = 1;
    string email = 2;
    string password = 3;
    google.protobuf.Timestamp create_time = 4;
    google.protobuf.Timestamp modify_time = 5;
}
message CreateUserRequest {
    User user = 1;
}
message CreateUserResponse {
    string id = 1;
}
message ReadUsersRequest {
}
message ReadUsersResponse {
    User user = 1;
}
message ReadUserRequest {
    string id = 1;
}
message ReadUserResponse {
    User user = 1;
}
message UpdateUserRequest {
    string id = 1;
    User user = 2;
}
message UpdateUserResponse {
    bool success = 1;
}
message DeleteUserRequest {
    string id = 1;
}
message DeleteUserResponse {
    bool success = 1;
}

